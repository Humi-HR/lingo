{"version":3,"file":"my-element.js","sourceRoot":"","sources":["../../src/my-element/my-element.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE1D;;;;;;GAMG;AAEH,IAAa,SAAS,GAAtB,MAAa,SAAU,SAAQ,UAAU;IAAzC;;QAWE,SAAI,GAAG,OAAO,CAAC;QAGf,UAAK,GAAG,CAAC,CAAC;IAoBZ,CAAC;IAlBU,MAAM;QACb,OAAO,IAAI,CAAA;YACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;uBACb,IAAI,CAAC,QAAQ;uBACb,IAAI,CAAC,KAAK;;;KAG5B,CAAC;IACJ,CAAC;IAEO,QAAQ;QACd,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;IACvD,CAAC;IAED,QAAQ,CAAC,IAAY;QACnB,OAAO,UAAU,IAAI,EAAE,CAAC;IAC1B,CAAC;CACF,CAAA;AAjCiB,gBAAM,GAAG,GAAG,CAAA;;;;;;;GAO1B,CAAA;AAGF;IADC,QAAQ,EAAE;uCACI;AAGf;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;wCACf;AAdC,SAAS;IADrB,aAAa,CAAC,gBAAgB,CAAC;GACnB,SAAS,CAkCrB;SAlCY,SAAS","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n/**\n * An example element.\n *\n * @fires count-changed - Indicates when the count changes\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('my-lit-element')\nexport class MyElement extends LitElement {\n  static override styles = css`\n    :host {\n      display: block;\n      border: solid 1px gray;\n      padding: 16px;\n      max-width: 800px;\n    }\n  `;\n\n  @property()\n  name = 'World';\n\n  @property({type: Number})\n  count = 0;\n\n  override render() {\n    return html`\n      <h1>${this.sayHello(this.name)}!</h1>\n      <button @click=${this._onClick} part=\"button\">\n        Click Count: ${this.count}\n      </button>\n      <slot></slot>\n    `;\n  }\n\n  private _onClick() {\n    this.count++;\n    this.dispatchEvent(new CustomEvent('count-changed'));\n  }\n\n  sayHello(name: string): string {\n    return `Hello, ${name}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'my-lit-element': MyElement;\n  }\n}\n"]}